{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/App.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","items","createReducer","_","payload","state","filter","id","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","axios","defaults","baseURL","getContacts","getFilter","getVisibleContacts","normalizedFilter","toLowerCase","text","name","includes","getFiteredContacts","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","e","target","value","className","s","form","onSubmit","preventDefault","find","contact","alert","a","post","data","addContact","label","type","pattern","title","input","placeholder","onChange","required","button","ContactList","useEffect","get","onDeleteContact","delete","deleteContact","list","map","item","info","onClick","Filter","contactsActions","App","section","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70f84e37.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3vgxv\",\"item\":\"ContactList_item__3e_v5\",\"button\":\"ContactList_button__3N5nH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__2wrfu\",\"input\":\"Filter_input__1cfDd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"App_title__VcNg9\",\"section\":\"App_section__2c58G\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  changeFilter,\r\n  fetchContactsSuccess,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => [...payload],\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport logger from 'redux-logger';\r\n\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst phonebookPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(phonebookPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContact =\r\n  ({ name, number }) =>\r\n  async dispatch => {\r\n    dispatch(addContactRequest());\r\n    const contact = {\r\n      name,\r\n      number,\r\n    };\r\n\r\n    try {\r\n      const { data } = await axios.post('/contacts', contact);\r\n      dispatch(addContactSuccess(data));\r\n    } catch (error) {\r\n      dispatch(addContactError(error));\r\n    }\r\n  };\r\n\r\nexport const deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n","export const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n\r\n  const getFiteredContacts = contacts => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(\r\n      text =>\r\n        text &&\r\n        text.name &&\r\n        text.name.toLowerCase &&\r\n        text.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  };\r\n\r\n  return getFiteredContacts(contacts);\r\n};\r\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n      setName('');\n      setNumber('');\n      return;\n    }\n\n    dispatch(addContact(name, number));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          className={s.input}\n          placeholder=\"Jon Jonson\"\n          value={name}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          placeholder=\"111-11-11\"\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport {\n  fetchContacts,\n  deleteContact,\n} from '../../redux/contacts/contacts-operations';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport s from './ContactList.module.css';\n\nexport default function ContactList() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(getVisibleContacts);\n\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li className={s.item} key={id}>\n          <p className={s.info}>\n            {name}: {number}\n          </p>\n          <button\n            className={s.button}\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\n\nimport s from './Filter.module.css';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n      />\n    </label>\n  );\n}\n","import React from 'react';\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport s from './App.module.css';\n\nconst App = () => {\n  return (\n    <div>\n      <h1 className={s.title}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={s.section}>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__37PZS\",\"label\":\"ContactForm_label__f-Y24\",\"input\":\"ContactForm_input__2Tvx_\",\"button\":\"ContactForm_button__ee7xm\"};"],"sourceRoot":""}